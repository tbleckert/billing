{"name":"Billing","tagline":"Billing is a Laravel package that provides a powerful bridge to Paymill that makes it easy to handle payments and subscriptions","body":"Billing\r\n=======\r\n\r\nBilling is a Laravel package that provides a powerful bridge to Paymill that makes it easy to handle payments and subscriptions\r\n\r\n- [Install](#install)\r\n- [Configuration](#configure)\r\n- [Offers](#offers)\r\n- [Clients](#clients)\r\n- [Payments](#payments)\r\n- [Subscriptions](#subscriptions)\r\n\r\n## Install\r\n\r\nSimply add Billing to your `composer.json`:\r\n\r\n\t\"tbleckert/billing\": \"dev-master\"\r\n\r\n## Configure\r\n\r\nTo start using Billing you need to publish the config files:\r\n\r\n\tphp artisan config:publish tbleckert/billing\r\n\t\r\nThen fill in your public and private Paymill keys in your new config located at `app/config/packages/tbleckert/billing/config.php`\r\n\r\n### Offers\r\n\r\nTo add Paymill offers/plans you open the config file (see above) and fill the offers array as follows:\r\n\r\n\t'offers'  => array(\r\n\t\t'Basic' => array(\r\n\t\t\t'monthly'  => 'offer_key',\r\n\t\t\t'annually' => 'offer_key'\r\n\t\t),\r\n\t\t'Special' => array(\r\n\t\t\t'daily'  => 'offer_key',\r\n\t\t\t'weekly' => 'offer_key'\r\n\t\t)\r\n\t)\r\n\t\r\nEach offer has a name and an array containing offer keys for each payment interval that the offer supports. As an example, you would use this code to subscribe a user to the basic plan with annual payment:\r\n\r\n\t$user = User::find(1);\r\n\t$user->subscription('Basic', 'annually')->create($token);\r\n\t\r\nMore about subscriptions further down.\r\n\r\n## Clients\r\n\r\nEach user needs a client in Paymill. I suggest that you set up a client in the user registration step (even if you support free accounts). This way, you have the user prepared for subscriptions and payments.\r\n\r\n### Create client\r\n\r\nThe `email` column will be used by default as the client email.\r\n\r\n\t$user->client()->create();\r\n\t\r\nTo set a different email, you can just pass it as a parameter in the `create` method:\r\n\r\n\t$user->client()->create('myemail@domain.com');\r\n\t\r\nYou can also add an optional description text\r\n\r\n\t$user->client()->create('myemail@domain.com', 'Client description');\r\n\t\r\n### Update client\r\n\r\nUpdating a client is very similar to creating one:\r\n\r\n\t$user->client()->update('myemail@domain.com', 'Client description');\r\n\t\r\n### Remove client\r\n\r\nTo remove a client from paymill, simply use the `remove` method:\r\n\r\n\t$user->client()->remove();\r\n\r\n## Payments\r\n\r\nFor any subscription or transaction, the client needs a payment. To create a payment we need to use the Paymill Bridge. The Bridge generates a token that we need when creating our payment.\r\n\r\n### Create payment\r\n\r\nFor the token generation, please have a look at the [official Paymill documentation](https://www.paymill.com/en-gb/documentation-3/introduction/payment-form/). Then, for the back-end:\r\n\r\n\t$token = Input::get('paymillToken');\r\n\t$user->payment($token)->create();\r\n\t\r\n### Update payment\r\n\r\nThere's no functionality for updating a payment, since that makes no sense. Instead, just create a new one and if you want, remove the old one.\r\n\r\n### Remove payment\r\n\r\n\t$user->payment(false, 'payment_id')->remove();\r\n\t\r\n### Payment details\r\n\r\nThe details for a payment can give you information like card type, last four card numbers and more.\r\n\r\n\t$user->payment(false, 'payment_id')->details();\r\n\t\r\n### List all payments\r\n\r\nTo get all payments created for a user, use the `all` method:\r\n\r\n\t$user->payment()->all();\r\n\t\r\n## Subscriptions\r\n\r\nSubscriptions connects a client to an offer with a payment. Paymill handles the payments automatically on the given interval.\r\n\r\n### Create subscription\r\n\r\nFor a subscription to work, the client needs a payment. You can either pass a payment id to the subscription method or let Billing automatically set the last registered payment. If the user already have a subscription, the create method will throw an exception.\r\n\r\n\t$user->subscription('Basic', 'annually')->create(); // Alternative 1\r\n\t$user->subscription('Basic', 'annually', 'pay_id')->create(); // Alternative 2\r\n\t\r\n### Subscription details\r\n\r\nSince the subscription id is saved to the database, you don't have to pass any parameter.\r\n\r\n\t$user->subscription()->details();\r\n\t\r\n### Update subscription\r\n\r\nYou can update a subscription to move the client to another offer or if the client has a new or updated payment.\r\n\r\n\t$user->subscription('Basic', 'monthly')->update();\r\n\t\r\n### Cancel subscription\r\n\r\nAt the moment, canceling a subscription will remove the client immediately from the subscription.\r\n\r\n\t$user->subscription()->remove();\r\n\t\r\n### List all subscriptions\r\n\r\nAt the moment, Billing only supports 1 subscription per user, but the `all` method still exists:\r\n\r\n\t$user->subscription()->all();\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}